/*
 *	This is an example configuration file.
 *	FIXME: add all examples from docs here.
 */

# Yet another comment

router id 62.168.0.1;

define xyzzy = (120+10);

function callme(int arg1; int arg2)
int local1;
int local2;
int i;
{
	printn "Function callme called arguments ", arg1, " and ", arg2, ":" ;
	i = arg2;

	case arg1 {
	2: print "dva"; print "jeste jednou dva";
	3 .. 5: print "tri az pet";
	else: print "neco jineho";
	}	
}

function fifteen()
{
	print "fifteen called";
	return 15;
}

function paths()
bgpmask pm1;
bgpmask pm2;
bgppath p2;
clist l;
{
	pm1 =  / 4 3 2 1 /;
	pm2 = [= 4 3 2 1 =];
	print "Testing path masks: ", pm1, " ", pm2;
	p2 = prepend( + empty +, 1 );
	p2 = prepend( p2, 2 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 4 );
	print "Testing paths: ", p2;
	print "Should be true: ", p2 ~ pm1, " ", p2 ~ pm2;
	print "4 = ", p2.len;
	p2 = prepend( p2, 5 );
	print "Should be false: ", p2 ~ pm1, " ", p2 ~ pm2;
	print "Should be true: ", p2 ~  / ? 4 3 2 1 /,  " ", p2, " ",  / ? 4 3 2 1 /;
	print "Should be true: ", p2 ~ [= * 4 3 * 1 =], " ", p2, " ", [= * 4 3 * 1 =];
	print "5 = ", p2.len;
	
	pm1 = [= 1 2 * 3 4 5 =];
	p2 = prepend( + empty +, 5 );
	p2 = prepend( p2, 4 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 3 );
	p2 = prepend( p2, 2 );
	p2 = prepend( p2, 1 );
	print "Should be true: ", p2 ~ pm1, " ", p2, " ", pm1;

	l = - empty -;
	l = add( l, (1,2) );
	l = add( l, (2,3) );
	print "Community list (1,2) (2,3) ", l;
	print "Should be true: ", (2,3) ~ l;
	l = delete( l, (2,3) );
	print "Community list (1,2) ", l;
	print "Should be false: ", (2,3) ~ l;
}

function bla()
{
	print "fifteen called";
	return 15;
}

define four=4;

function test_pxset(prefix set pxs)
{
	print "  must be true:  ",	1000::/8  ~ pxs, ",", 1000::/10  ~ pxs, ",", 1000::/12 ~ pxs, ",",
					2000::/24 ~ pxs, ",", 2000:4000::/24 ~ pxs, ",", 2000::/26 ~ pxs, ",",
					2000:8000::/26 ~ pxs, ",", 2000::/28 ~ pxs, ",", 2000:FFF0::/28 ~ pxs;
	print "  must be false: ",	1000::/7 ~ pxs,  ",", 1000::/13 ~ pxs, ",", 1000::/16 ~ pxs, ",",
					2000::/16 ~ pxs, ",", 2000::/23 ~ pxs, ",", 2000::/29 ~ pxs, ",",
					1100::/10 ~ pxs, ",", 2010::/26 ~ pxs;
}

function __startup() 
int i;
bool b;
prefix px;
ip p;
pair pp;
int set is;
prefix set pxs;
string s;
{ 
	print "Testing filter language:";
	i = four; 
	i = 12*100 + 60/2 + i; 
	i = ( i + 0 );
	print "  arithmetics: 1234 = ", i;
	printn "  if statements ";
	print "what happens here?";
	printn ".";
	if (i = 4) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
#	if !(i = 3) then { print "*** FAIL: if 0"; quitbird; } else printn ".";
	if 1234 = i then printn "."; else { print "*** FAIL: if 1 else"; }
#	if 1 <= 1 then printn "."; else { print "*** FAIL: test 3"; }
	if 1234 < 1234 then { print "*** FAIL: test 4"; quitbird; } else print "ok";
	is = [ 2, 3, 4, 7..11 ];
	print "  must be true: ", 1180::/16 ~ [ 1100::/8{ 15 , 17 } ];
	print "  data types; must be true: ", 12::34 = 12::34, ",", 1 ~ [1,2,3], ",", 5 ~ [1..20], ",", 10 ~ is, ",", 2 ~ [ 1, 2, 3 ], ",", 5 ~ [ 4 .. 7 ], ",", 12::34 ~ [ 12::33..12::35 ], ",", 1020::34 ~ 1000::/8, ",", 1000::/8 ~ 1000::/8, ",", 1000::/8 ~ [ 1000::/8+ ];
	print "  must be true: ", true && true, ",", true || false;

#	print "  must be true: ", defined(1), ",", defined(1.2.3.4), ",", 1 != 2, ",", 1 <= 2;
	print "  data types: must be false: ", 1 ~ [ 2, 3, 4 ], ",", 5 ~ is, ",", 12::34 ~ [ 12::33, 12::35 ], ",", (1,2) > (2,2), ",", (1,1) > (1,1), ",", 1000::/9 ~ [ 1000::/8- ], ",", 1000::/17 ~ [ 1000::/8{ 15 , 16 } ], ",", true && false;

	px = 1020::/18;
	print "Testing prefixes: 1020::/18 = ", px;
	p = 1234:5678::;
	print "Testing mask : 1200:: = ", p.mask(8);
	
	pp = (1, 2);
	print "Testing pairs: (1,2) = ", (1,2), " = ", pp;
	print "Testing enums: ", RTS_DUMMY, " ", RTS_STATIC;

	s = "Hello";
	print "Testing string: ", s, " true: ", s ~ "Hell*", " false: ", s ~ "ell*";
	
	b = true;
	print "Testing bool: ", b, ", ", !b;
	
	pxs = [ 1102::/16, 1104::/16+];
	print "Testing prefix sets: ";
	print pxs;
	print "  must be true:  ",	1102::/16 ~ pxs, ",", 1104::/16 ~ pxs, ",", 1104::/18 ~ pxs, ",", 1104::/32 ~ pxs;
	print "  must be false: ",	1101::/16 ~ pxs, ",", 1103::/16 ~ pxs, ",", 1102::/15 ~ pxs, ",", 1102::/17 ~ pxs, ",",
					1102::/32 ~ pxs, ",", 1104::/15 ~ pxs;

	test_pxset([ 1000::/16{8,12}, 2000::/16{24,28} ]);
	print "What will this do? ", [ 1, 2, 1, 1, 1, 3, 4, 1, 1, 1, 5 ];

	print "Testing functions...";
#	callme ( 1, 2 );
	callme ( 2, 2 );
	callme ( 2, 2 );
	callme ( 3, 2 );
	callme ( 4, 2 );
	callme ( 7, 2 );

	i = fifteen();
	print "Testing function calls: 15 = ", i;

	paths();

	print "done";
	quitbird;
#	print "*** FAIL: this is unreachable"; 
}

filter testf 
int j; 
{ 
	print "Heya, filtering route to ", net.ip, " prefixlen ", net.len, " source ", source;
	print "This route was from ", from;
	j = 7;
	j = 17;
	if rip_metric > 15 then {
 		reject "RIP Metric is more than infinity";
	}
	rip_metric = 14;
	unset(rip_metric);
		
	accept "ok I take that";
}

eval __startup();