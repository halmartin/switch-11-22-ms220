diff -Naur --exclude '*~' origpppd/pppd/plugins/Makefile.linux newpppd/pppd/plugins//Makefile.linux
--- origpppd/pppd/plugins/Makefile.linux	2012-02-16 15:00:39.000000000 -0800
+++ newpppd/pppd/plugins/Makefile.linux	2012-02-17 14:07:55.000000000 -0800
@@ -12,7 +12,7 @@
 SUBDIRS := rp-pppoe pppoatm pppol2tp
 # Uncomment the next line to include the radius authentication plugin
 SUBDIRS += radius
-PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so
+PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so remoteip.so
 
 # include dependencies if present
 ifeq (.depend,$(wildcard .depend))
diff -Naur --exclude '*~' origpppd/pppd/plugins//remoteip.c newpppd/pppd/plugins//remoteip.c
--- origpppd/pppd/plugins/remoteip.c	1969-12-31 16:00:00.000000000 -0800
+++ newpppd/pppd/plugins/remoteip.c	2012-03-02 14:31:48.000000000 -0800
@@ -0,0 +1,178 @@
+#include <errno.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/file.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#include "pppd.h"
+
+const char pppd_version[] = VERSION;
+
+static char *ip_pool_file = NULL;
+
+static u_int32_t assigned_ip = 0;
+
+static option_t options[] = {
+    { "ip_pool_file", o_string, &ip_pool_file,
+      "Path to IP pool file" },
+    { NULL }
+};
+
+ssize_t
+safe_read(int fd, void *data, size_t len)
+{
+    size_t pos = 0;
+    while (pos != len) {
+	ssize_t x = read(fd, (char *) data + pos, len - pos);
+	if (x == -1 && errno == EINTR)
+	    continue;
+	else if (x == -1)
+	    return -1;
+	else if (x == 0)
+	    return pos;
+	else
+	    pos += (size_t) x;
+    }
+    return len;
+}
+
+ssize_t
+safe_write(int fd, const void *data, size_t len)
+{
+    size_t pos = 0;
+    while (pos != len) {
+	ssize_t x = write(fd, (const char *) data + pos, len - pos);
+	if (x == -1 && errno == EINTR)
+	    continue;
+	else if (x == -1)
+	    return -1;
+	else if (x == 0) {
+	    errno = ENODATA;
+	    return -1;
+	} else
+	    pos += (size_t) x;
+    }
+    return len;
+}
+
+static void choose_ip(u_int32_t *remoteaddr)
+{
+    if (!remoteaddr)
+	fatal("remoteip: remoteaddr was NULL");
+
+    if (!ip_pool_file)
+	fatal("remoteip: ip_pool_file was not specified");
+
+    int file = open(ip_pool_file, O_RDWR);
+    if (file < 0)
+	fatal("remoteip: failed to open ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    int i;
+    int lockres = flock(file, LOCK_EX | LOCK_NB);
+    for (i = 0; lockres != 0 && i < 10; ++i) {
+	usleep(100000);
+	lockres = flock(file, LOCK_EX | LOCK_NB);
+    }
+
+    if (lockres != 0)
+	fatal("remoteip: failed to acquire lock on ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    struct stat file_stat;
+    if (fstat(file, &file_stat) != 0)
+	fatal("remoteip: failed to get file stat on ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    if (file_stat.st_size == 0)
+	fatal("remoteip: no addresses available in ip_pool_file: %s", ip_pool_file);
+
+    if (file_stat.st_size > 17 && -1 == lseek(file, -17, SEEK_END))
+	fatal("remoteip: failed to seek in ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    char buffer[17];
+    memset(buffer, 0, sizeof(buffer));
+    ssize_t readchars = safe_read(file, buffer, sizeof(buffer));
+    if (readchars < 8 || buffer[readchars - 1] != '\n')
+	fatal("remoteip: invalid format in ip_pool_file: %s read: %d data: {%s}",
+	      ip_pool_file, readchars, buffer);
+
+    off_t newsize = file_stat.st_size - 1;
+    buffer[readchars - 1] = '\0';
+    char *str_start = buffer + (readchars - 1);
+    while (str_start > buffer && *(str_start - 1) != '\n') {
+	--str_start;
+	--newsize;
+    }
+
+    struct in_addr address;
+    if (!inet_aton(str_start, &address))
+	fatal("remoteip: failed to parse address: %s errno: %d", str_start, errno);
+
+    if (ftruncate(file, newsize) != 0)
+	fatal("remoteip: failed to truncate file: %s errno: %d", ip_pool_file, errno);
+
+    *remoteaddr = assigned_ip = address.s_addr;
+
+    close(file);
+}
+
+static void release_ip()
+{
+    if (!assigned_ip)
+	return;
+
+    if (!ip_pool_file)
+	fatal("remoteip: ip_pool_file was not specified");
+
+    int file = open(ip_pool_file, O_WRONLY | O_APPEND);
+    if (file < 0)
+	fatal("remoteip: failed to open ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    int i;
+    int lockres = flock(file, LOCK_EX | LOCK_NB);
+    for (i = 0; lockres != 0 && i < 10; ++i) {
+	usleep(100000);
+	lockres = flock(file, LOCK_EX | LOCK_NB);
+    }
+
+    if (lockres != 0)
+	fatal("remoteip: failed to acquire lock on ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    struct stat file_stat;
+    if (fstat(file, &file_stat) != 0)
+	fatal("remoteip: failed to get file stat on ip_pool_file: %s errno: %d", ip_pool_file, errno);
+
+    struct in_addr address;
+    address.s_addr = assigned_ip;
+    assigned_ip = 0;
+    char *address_str;
+    address_str = inet_ntoa(address);
+    if (-1 == safe_write(file, address_str, strlen(address_str)) ||
+	-1 == safe_write(file, "\n", 1)) {
+	int write_err = errno;
+	if (ftruncate(file, file_stat.st_size) != 0)
+	    fatal("remoteip: failed to write address %s to ip_pool_file: %s errno: %d.  Failed to truncate file back to original: %d",
+		  address, ip_pool_file, write_err, errno);
+	else
+	    fatal("remoteip: failed to write address %s to ip_pool_file: %s errno: %d.  Truncated file back to original.",
+		  address, ip_pool_file, write_err);
+    }
+
+    close(file);
+}
+
+static void ip_cleanup(void *arg, int val)
+{
+    release_ip();
+}
+
+void plugin_init (void)
+{
+    add_options (options);
+
+    ip_choose_hook = choose_ip;
+    ip_down_hook = release_ip;
+
+    add_notifier(&exitnotify, ip_cleanup, 0);
+}
