diff -Naur --exclude '*~' --exclude 'remoteip*' --exclude 'plugin*' origpppd/pppd/plugins/ipfromclick.c newpppd/pppd/plugins/ipfromclick.c
--- origpppd/pppd/plugins/ipfromclick.c	1969-12-31 16:00:00.000000000 -0800
+++ newpppd/pppd/plugins/ipfromclick.c	2012-03-30 18:32:21.000000000 -0700
@@ -0,0 +1,148 @@
+#include <errno.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/file.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#include "pppd.h"
+
+const char pppd_version[] = VERSION;
+
+static char *click_request_path = NULL;
+static char *click_release_path = NULL;
+static char *remote_peer_address = NULL;
+
+static u_int32_t assigned_ip = 0;
+
+static option_t options[] = {
+    { "click_request_path", o_string, &click_request_path,
+      "Path to click handler to request IP for user" },
+    { "click_release_path", o_string, &click_release_path,
+      "Path to click handler to release IP" },
+    { "remote_peer_address", o_string, &remote_peer_address,
+      "Client's remote address" },
+    { NULL }
+};
+
+ssize_t
+safe_write(int fd, const void *data, size_t len)
+{
+    size_t pos = 0;
+    while (pos != len) {
+        ssize_t x = write(fd, (const char *) data + pos, len - pos);
+        if (x == -1 && errno == EINTR)
+            continue;
+        else if (x == -1)
+            return -1;
+        else if (x == 0) {
+            errno = ENODATA;
+            return -1;
+        } else
+            pos += (size_t) x;
+    }
+    return len;
+}
+
+ssize_t
+safe_read(int fd, void *data, size_t len)
+{
+    size_t pos = 0;
+    while (pos != len) {
+        ssize_t x = read(fd, (char *) data + pos, len - pos);
+        if (x == -1 && errno == EINTR)
+            continue;
+        else if (x == -1)
+            return -1;
+        else if (x == 0)
+            return pos;
+        else
+            pos += (size_t) x;
+    }
+    return len;
+}
+
+static void choose_ip(u_int32_t *remoteaddr)
+{
+    if (!remoteaddr)
+        fatal("ipfromclick: remoteaddr was NULL");
+
+    if (!click_request_path)
+        fatal("ipfromclick: click_request_path was not specified");
+
+    if (!remote_peer_address)
+        fatal("ipfromclick: remote_peer_address was not specified");
+
+    int file = open(click_request_path, O_RDWR | O_TRUNC);
+    if (file < 0)
+        fatal("ipfromclick: failed to open click_request_path: %s errno: %d", click_request_path, errno);
+
+    char pidstr[12];
+    snprintf(pidstr, sizeof(pidstr), "%d", getpid());
+
+    if (-1 == safe_write(file, remote_peer_address, strlen(remote_peer_address)) ||
+        -1 == safe_write(file, " ", 1) ||
+        -1 == safe_write(file, pidstr, strlen(pidstr)) ||
+        -1 == safe_write(file, " ", 1) ||
+        -1 == safe_write(file, peer_authname, strlen(peer_authname)))
+        fatal("ipfromclick: failed to write remote ip {%s}, user {%s}, pid {%s} to click_request_path: %s errno: %d",
+              remote_peer_address, peer_authname, pidstr, click_request_path, errno);
+
+    char buffer[16];
+    memset(buffer, 0, sizeof(buffer));
+    ssize_t readchars = safe_read(file, buffer, sizeof(buffer));
+    if (readchars < 8 || buffer[readchars - 1] != '\n')
+        fatal("ipfromclick: invalid format returned from click_request_path: %s read: %d data: {%s}",
+              click_request_path, readchars, buffer);
+
+    buffer[readchars - 1] = '\0';
+
+    struct in_addr address;
+    if (!inet_aton(buffer, &address))
+        fatal("ipfromclick: failed to parse address: %s errno: %d", buffer, errno);
+
+    *remoteaddr = assigned_ip = address.s_addr;
+
+    close(file);
+}
+
+static void release_ip()
+{
+    if (!assigned_ip)
+        return;
+
+    if (!click_release_path)
+        fatal("ipfromclick: click_release_path was not specified");
+
+    int file = open(click_release_path, O_WRONLY | O_TRUNC);
+    if (file < 0)
+        fatal("ipfromclick: failed to open click_release_path: %s errno: %d", click_release_path, errno);
+
+    struct in_addr address;
+    address.s_addr = assigned_ip;
+    assigned_ip = 0;
+    char *address_str;
+    address_str = inet_ntoa(address);
+    if (-1 == safe_write(file, address_str, strlen(address_str)))
+        fatal("ipfromclick: failed to write IP {%s} to click_release_path: %s errno: %d",
+              address_str, click_release_path, errno);
+
+    close(file);
+}
+
+static void ip_cleanup(void *arg, int val)
+{
+    release_ip();
+}
+
+void plugin_init (void)
+{
+    add_options (options);
+
+    ip_choose_hook = choose_ip;
+    ip_down_hook = release_ip;
+
+    add_notifier(&exitnotify, ip_cleanup, 0);
+}
diff -Naur --exclude '*~' --exclude 'remoteip*' --exclude 'plugin*' origpppd/pppd/plugins/Makefile.linux newpppd/pppd/plugins/Makefile.linux
--- origpppd/pppd/plugins/Makefile.linux	2012-02-16 15:00:39.000000000 -0800
+++ newpppd/pppd/plugins/Makefile.linux	2012-03-27 18:32:01.000000000 -0700
@@ -12,7 +12,7 @@
 SUBDIRS := rp-pppoe pppoatm pppol2tp
 # Uncomment the next line to include the radius authentication plugin
 SUBDIRS += radius
-PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so remoteip.so
+PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so remoteip.so ipfromclick.so
 
 # include dependencies if present
 ifeq (.depend,$(wildcard .depend))
