commit 4a6875267414dde2a27062c178f11113e1c73fb5
Author: Stephen Segal <ssegal@meraki.com>
Date:   Tue Dec 6 12:09:11 2016 -0800

    Allow pcap_open_offline to accept UNIX sockets

diff --git a/savefile.c b/savefile.c
index 247338c..0a5eefa 100644
--- a/savefile.c
+++ b/savefile.c
@@ -43,9 +43,17 @@
 #ifdef HAVE_SYS_BITYPES_H
 #include <sys/bitypes.h>
 #endif
-#include <sys/types.h>
+//#include <sys/types.h>
 #endif /* _WIN32 */
 
+#if !defined(WIN32) && !defined(MSDOS)
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
+#include <sys/un.h>
+#include <unistd.h>
+#endif
+
 #include <errno.h>
 #include <memory.h>
 #include <stdio.h>
@@ -294,7 +302,40 @@ pcap_open_offline_with_tstamp_precision(const char *fname, u_int precision,
 	}
 	else {
 #if !defined(_WIN32) && !defined(MSDOS)
-		fp = fopen(fname, "r");
+		struct stat st;
+		int fd;
+
+		if (stat(fname, &st) != 0) {
+			fp = NULL;
+		} else if (S_ISSOCK(st.st_mode)) {
+			struct sockaddr_un sa;
+
+			if (strlen(fname) > (sizeof(sa.sun_path)-1)) {
+				snprintf(errbuf, PCAP_ERRBUF_SIZE,
+					"filename too long");
+				return (NULL);
+			}
+			fd = socket(AF_UNIX, SOCK_STREAM, 0);
+			if (fd < 0) {
+				snprintf(errbuf, PCAP_ERRBUF_SIZE,
+					"socket: %s", pcap_strerror(errno));
+				return (NULL);
+			}
+			sa.sun_family = AF_UNIX;
+			strcpy(sa.sun_path, fname);
+			if (connect(fd, (struct sockaddr*)&sa, sizeof(sa)) < 0) {
+				snprintf(errbuf, PCAP_ERRBUF_SIZE, "%s: %s",
+					 fname,
+					 pcap_strerror(errno));
+				close(fd);
+				return (NULL);
+			}
+			fp = fdopen(fd, "r");
+			if (fp == NULL)
+				close(fd);
+		} else {
+			fp = fopen(fname, "r");
+		}
 #else
 		fp = fopen(fname, "rb");
 #endif
