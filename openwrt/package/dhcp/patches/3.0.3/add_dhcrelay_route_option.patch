diff -Naur -x '*~' orig/relay/dhcrelay.c new/relay/dhcrelay.c
--- orig/relay/dhcrelay.c	2011-04-04 18:09:26.000000000 -0700
+++ new/relay/dhcrelay.c	2011-04-04 19:27:55.000000000 -0700
@@ -97,6 +97,13 @@
 	struct sockaddr_in to;
 } *servers;
 
+struct route_list {
+	struct route_list *next;
+	char in_if_name [IFNAMSIZ];
+	char out_if_name [IFNAMSIZ];
+	struct in_addr server;
+} *routes = 0;
+
 static char copyright [] = "Copyright 2004-2005 Internet Systems Consortium.";
 static char arr [] = "All rights reserved.";
 static char message [] = "Internet Systems Consortium DHCP Relay Agent";
@@ -109,6 +116,7 @@
 	int i;
 	struct servent *ent;
 	struct server_list *sp = (struct server_list *)0;
+	struct route_list *rl = (struct route_list *)0;
 	int no_daemon = 0;
 	int quiet = 0;
 	isc_result_t status;
@@ -200,6 +208,37 @@
 				usage ();
 		} else if (!strcmp (argv [i], "-D")) {
 			drop_agent_mismatches = 1;
+		} else if (!strcmp (argv [i], "-r")) {
+			struct in_addr ia, *iap = (struct in_addr *)0;
+			if (i + 3 >= argc)
+				usage ();
+			if (strlen(argv[i + 1]) >= sizeof rl->in_if_name)
+				log_fatal ("%s: interface name too long", argv[i + 1]);
+			if (strlen(argv[i + 2]) >= sizeof rl->out_if_name)
+				log_fatal ("%s: interface name too long", argv[i + 2]);
+			for (rl = routes; rl; rl = rl -> next)
+				if (!strcmp (rl -> in_if_name, argv[i + 1]))
+					log_fatal ("route already exists for interface %s", argv[i + 1]);
+			if (inet_aton (argv [i + 3], &ia)) {
+				iap = &ia;
+			} else {
+				struct hostent *he;
+				he = gethostbyname (argv [i + 3]);
+				if (!he || !(he -> h_addr_list [0])) {
+					log_fatal ("%s: host unknown", argv [i + 3]);
+				} else {
+					iap = ((struct in_addr *) he -> h_addr_list [0]);
+				}
+			}
+			rl = ((struct route_list *) dmalloc (sizeof *rl, MDL));
+			if (!rl)
+				log_fatal ("no memory for route.\n");
+			rl -> next = routes;
+			routes = rl;
+			strcpy (rl -> in_if_name, argv [i + 1]);
+			strcpy (rl -> out_if_name, argv [i + 2]);
+			memcpy (&rl -> server, iap, sizeof *iap);
+			i += 3;
  		} else if (argv [i][0] == '-') {
  		    usage ();
 		} else if (!strcmp (argv [i], "--version")) {
@@ -263,6 +302,26 @@
 		usage ();
 	}
 
+	/* Check that routes are valid. */
+	for (rl = routes; rl; rl = rl -> next) {
+		struct interface_info *intf;
+		for (sp = servers; sp; sp = sp -> next)
+			if (!memcmp (&sp -> to.sin_addr, &rl -> server, sizeof rl -> server))
+				break;
+		if (!sp)
+			log_fatal("%s: not in list of configured servers", inet_ntoa (rl -> server));
+		for (intf = interfaces; intf; intf = intf -> next)
+			if (!strcmp (intf -> name, rl -> in_if_name))
+				break;
+		if (!intf)
+			log_fatal("%s: not in list of configured interfaces", rl -> in_if_name);
+		for (intf = interfaces; intf; intf = intf -> next)
+			if (!strcmp (intf -> name, rl -> out_if_name))
+				break;
+		if (!intf)
+			log_fatal("%s: not in list of configured interfaces", rl -> out_if_name);
+	}
+
 	/* Set up the server sockaddrs. */
 	for (sp = servers; sp; sp = sp -> next) {
 		sp -> to.sin_port = local_port;
@@ -433,24 +492,57 @@
 	else
 		return;
 
-	/* Otherwise, it's a BOOTREQUEST, so forward it to all the
-	   servers. */
-	for (sp = servers; sp; sp = sp -> next) {
-		if (send_packet ((fallback_interface
-				  ? fallback_interface : interfaces),
-				 (struct packet *)0,
-				 packet, length, ip -> primary_address,
-				 &sp -> to, (struct hardware *)0) < 0) {
+	/* Otherwise, it's a BOOTREQUEST, so forward it to the server(s). */
+	if (routes) {
+		struct route_list *rl;
+		int matching_route = 0;
+		for (rl = routes; rl; rl = rl -> next) {
+			if (strcmp (rl -> in_if_name, ip -> name))
+				continue;
+			matching_route = 1;
+			for (out = interfaces; out; out = out -> next)
+				if (!strcmp (out -> name, rl -> out_if_name))
+					break;
+			for (sp = servers; sp; sp = sp -> next)
+				if (!memcmp (&sp -> to.sin_addr, &rl -> server, sizeof rl -> server))
+					break;
+			if (!out || !sp) {
+				++client_packet_errors;
+				continue;
+			}
+			if (send_packet ((fallback_interface
+					  ? fallback_interface : out),
+					 (struct packet *)0,
+					 packet, length, ip -> primary_address,
+					 &sp -> to, (struct hardware *)0) < 0) {
+				++client_packet_errors;
+			} else {
+				log_debug ("forwarded BOOTREQUEST for %s to %s",
+					   print_hw_addr (packet -> htype, packet -> hlen,
+							  packet -> chaddr),
+					   inet_ntoa (sp -> to.sin_addr));
+				++client_packets_relayed;
+			}
+		}
+		if (!matching_route)
 			++client_packet_errors;
-		} else {
-			log_debug ("forwarded BOOTREQUEST for %s to %s",
-			       print_hw_addr (packet -> htype, packet -> hlen,
-					      packet -> chaddr),
-			       inet_ntoa (sp -> to.sin_addr));
-			++client_packets_relayed;
+	} else {
+		for (sp = servers; sp; sp = sp -> next) {
+			if (send_packet ((fallback_interface
+					  ? fallback_interface : interfaces),
+					 (struct packet *)0,
+					 packet, length, ip -> primary_address,
+					 &sp -> to, (struct hardware *)0) < 0) {
+				++client_packet_errors;
+			} else {
+				log_debug ("forwarded BOOTREQUEST for %s to %s",
+					   print_hw_addr (packet -> htype, packet -> hlen,
+							  packet -> chaddr),
+					   inet_ntoa (sp -> to.sin_addr));
+				++client_packets_relayed;
+			}
 		}
 	}
-				 
 }
 
 static void usage ()
