diff --git a/common/options.c b/common/options.c
index 09cd785..996161d 100644
--- a/common/options.c
+++ b/common/options.c
@@ -4371,6 +4371,8 @@ add_option(struct option_state *options,
 	return 1;
 }
 
+int meraki_nonstrict_option_61 = 0;
+
 /**
  *  Checks if received BOOTP/DHCPv4 packet is sane
  *
@@ -4387,9 +4389,16 @@ int validate_packet(struct packet *packet)
 	if (oc) {
 		/* Let's check if client-identifier is sane */
 		if (oc->data.len == 0) {
-			log_debug("Dropped DHCPv4 packet with zero-length client-id");
-			return (0);
-
+			/*
+			 * PATCH: allow 0-length option 61 DHCP packets
+			 * Some of our customers have broken clients
+			 */
+			if (meraki_nonstrict_option_61) {
+				log_debug("Ignoring RFC2132, allowing zero-length client-id option");
+			} else {
+				log_debug("Dropped DHCPv4 packet with zero-length client-id");
+				return (0);
+			}
 		} else if (oc->data.len == 1) {
 			/*
 			 * RFC2132, section 9.14 states that minimum length of client-id
diff --git a/includes/dhcpd.h b/includes/dhcpd.h
index eab09a6..e020148 100644
--- a/includes/dhcpd.h
+++ b/includes/dhcpd.h
@@ -799,6 +799,7 @@ struct lease_state {
 #define SV_PREFIX_LEN_MODE		87
 #define SV_DHCPV6_SET_TEE_TIMES		88
 #define SV_ABANDON_LEASE_TIME		89
+#define SV_MERAKI_NONSTRICT_OPTION_61	90
 
 #if !defined (DEFAULT_PING_TIMEOUT)
 # define DEFAULT_PING_TIMEOUT 1
diff --git a/server/dhcpd.c b/server/dhcpd.c
index 373b3f4..1986447 100644
--- a/server/dhcpd.c
+++ b/server/dhcpd.c
@@ -75,6 +75,7 @@ int ddns_update_style;
 int dont_use_fsync = 0; /* 0 = default, use fsync, 1 = don't use fsync */
 int server_id_check = 0; /* 0 = default, don't check server id, 1 = do check */
 int prefix_length_mode = PLM_EXACT;
+extern int meraki_nonstrict_option_61;
 
 int authoring_byte_order = 0; /* 0 = not set */
 int lease_id_format = TOKEN_OCTAL; /* octal by default */
@@ -1266,6 +1267,17 @@ void postconf_initialization (int quiet)
 		data_string_forget (&db, MDL);
         }
 
+	/*
+	 * PATCH: meraki option to allow less strict option 61 (0 length packets)
+	 */
+	oc = lookup_option(&server_universe, options, SV_MERAKI_NONSTRICT_OPTION_61);
+	if ((oc != NULL) &&
+		evaluate_boolean_option_cache(NULL, NULL, NULL, NULL, options, NULL,
+						&global_scope, oc, MDL)) {
+		log_info("Setting Meraki nonstrict option 61 to true");
+		meraki_nonstrict_option_61 = 1;
+	}
+
 #if defined (BINARY_LEASES)
 	if (local_family == AF_INET) {
 		log_info("Source compiled to use binary-leases");
diff --git a/server/stables.c b/server/stables.c
index 445ef0f..6e1ae00 100644
--- a/server/stables.c
+++ b/server/stables.c
@@ -277,6 +277,7 @@ static struct option server_options[] = {
 	{ "prefix-length-mode", "Nprefix_length_modes.",	&server_universe,  SV_PREFIX_LEN_MODE, 1 },
 	{ "dhcpv6-set-tee-times", "f",		&server_universe,  SV_DHCPV6_SET_TEE_TIMES, 1 },
 	{ "abandon-lease-time", "T",		&server_universe,  SV_ABANDON_LEASE_TIME, 1 },
+	{ "meraki-nonstrict-option-61", "f",	&server_universe, SV_MERAKI_NONSTRICT_OPTION_61, 1 },
 	{ NULL, NULL, NULL, 0, 0 }
 };
 
