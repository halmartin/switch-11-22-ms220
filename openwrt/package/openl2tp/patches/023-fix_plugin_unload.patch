 l2tp_main.c    |    2 ++
 l2tp_plugin.c  |   17 ++++++++++++++++-
 l2tp_private.h |    1 +
 3 files changed, 19 insertions(+), 1 deletions(-)

diff --git a/l2tp_main.c b/l2tp_main.c
index 39f89d2..fda55ce 100644
--- a/l2tp_main.c
+++ b/l2tp_main.c
@@ -790,6 +790,8 @@ static void l2tp_cleanup(void)
 	usl_signal_cleanup();
 	usl_pid_cleanup();
 
+	l2tp_plugin_release();
+
 	if (l2tp_rand_fd != 0) {
 		close(l2tp_rand_fd);
 	}
diff --git a/l2tp_plugin.c b/l2tp_plugin.c
index 73f1bc5..024c0c4 100644
--- a/l2tp_plugin.c
+++ b/l2tp_plugin.c
@@ -158,12 +158,27 @@ void l2tp_plugin_cleanup(void)
 	/* Call cleanup functions of every loaded plugin */
 	usl_list_for_each(walk, tmp, &l2tp_plugin_list) {
 		plugin = usl_list_entry(walk, struct l2tp_plugin, list);
-		l2tp_log(LOG_INFO, "Unloading plugin %s", plugin->path);
+		l2tp_log(LOG_INFO, "Cleaning up plugin %s", plugin->path);
 		if (plugin->handle != NULL) {
 			cleanup = (void (*)(void))dlsym(plugin->handle, "openl2tp_plugin_cleanup");
 			if (cleanup != NULL) {
 				(*cleanup)();
 			}
+		}
+	}
+}
+
+void l2tp_plugin_release(void)
+{
+	struct l2tp_plugin *plugin;
+	struct usl_list_head *tmp;
+	struct usl_list_head *walk;
+
+	/* Unload and free resources for every loaded plugin */
+	usl_list_for_each(walk, tmp, &l2tp_plugin_list) {
+		plugin = usl_list_entry(walk, struct l2tp_plugin, list);
+		l2tp_log(LOG_INFO, "Unloading plugin %s", plugin->path);
+		if (plugin->handle != NULL) {
 			dlclose(plugin->handle);
 		}
 		free(plugin->path);
diff --git a/l2tp_private.h b/l2tp_private.h
index f3c1af7..1d91afa 100644
--- a/l2tp_private.h
+++ b/l2tp_private.h
@@ -874,6 +874,7 @@ extern void l2tp_ppp_cleanup(void);
 extern int l2tp_plugin_add(char *name);
 extern int l2tp_plugin_init(void);
 extern void l2tp_plugin_cleanup(void);
+extern void l2tp_plugin_release(void);
 
 /* l2tp_packet.c */
 extern int l2tp_pkt_cmp(void *t1, void *t2, int cmp_len);
