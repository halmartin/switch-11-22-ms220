diff -Nur wondershaper-1.1a/wshaper.conf wondershaper-1.1a_openwrt/wshaper.conf
--- wondershaper-1.1a/wshaper.conf	1970-01-01 01:00:00.000000000 +0100
+++ wondershaper-1.1a_openwrt/wshaper.conf	2005-09-09 00:31:54.239340744 +0200
@@ -0,0 +1,27 @@
+# Wonder Shaper
+# please read the README before filling out these values
+#
+# Set the following values to somewhat less than your actual download
+# and uplink speed. In kilobits.
+DOWNLINK=1000
+UPLINK=220
+
+# low priority OUTGOING traffic - you can leave this blank if you want
+# low priority source netmasks
+NOPRIOHOSTSRC=80
+
+# low priority destination netmasks
+NOPRIOHOSTDST=
+
+# low priority source ports
+NOPRIOPORTSRC=
+
+# low priority destination ports
+NOPRIOPORTDST=
+
+# WAN device
+DEV=$(nvram get wan_ifname)
+
+# tc location
+TC=/usr/sbin/tc
+
diff -Nur wondershaper-1.1a/wshaper.htb wondershaper-1.1a_openwrt/wshaper.htb
--- wondershaper-1.1a/wshaper.htb	2002-04-16 16:26:51.000000000 +0200
+++ wondershaper-1.1a_openwrt/wshaper.htb	2005-09-11 13:24:56.143626544 +0200
@@ -1,44 +1,22 @@
-#!/bin/bash
+#!/bin/ash 
 # Wonder Shaper
-# please read the README before filling out these values 
-#
-# Set the following values to somewhat less than your actual download
-# and uplink speed. In kilobits. Also set the device that is to be shaped.
-
-DOWNLINK=800
-UPLINK=220
-DEV=ppp0
-
-# low priority OUTGOING traffic - you can leave this blank if you want
-# low priority source netmasks
-NOPRIOHOSTSRC=
-
-# low priority destination netmasks
-NOPRIOHOSTDST=
+. /etc/functions.sh
+. /etc/wshaper.conf
 
-# low priority source ports
-NOPRIOPORTSRC=
 
-# low priority destination ports
-NOPRIOPORTDST=
-
-
-# Now remove the following two lines :-)
-
-echo Please read the documentation in 'README' first
-exit
+# do the magic
 
 if [ "$1" = "status" ]
 then
-	tc -s qdisc ls dev $DEV
-	tc -s class ls dev $DEV
+	$TC -s qdisc ls dev $DEV
+	$TC -s class ls dev $DEV
 	exit
 fi
 
 
 # clean existing down- and uplink qdiscs, hide errors
-tc qdisc del dev $DEV root    2> /dev/null > /dev/null
-tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null
+$TC qdisc del dev $DEV root    2> /dev/null > /dev/null
+$TC qdisc del dev $DEV ingress 2> /dev/null > /dev/null
 
 if [ "$1" = "stop" ] 
 then 
@@ -46,50 +24,66 @@
 fi
 
 
+# wondershaper must be executed everytime an interface comes up
+# if we have dynamic interface ppp0 add wondershaper to ip-up
+if [ $DEV = "ppp0" ] && ! grep -q wshaper /etc/ppp/ip-up
+then
+  echo "/usr/sbin/wshaper" >> /etc/ppp/ip-up
+  chmod 755 /etc/ppp/ip-up
+fi
+
+
+
+# load the needed kernel modules
+for module in sch_prio sch_htb sch_sfq sch_ingress cls_tcindex cls_fw cls_route cls_u32
+do
+  insmod $module 2> /dev/null > /dev/null
+done
+
 ###### uplink
 
 # install root HTB, point default traffic to 1:20:
 
-tc qdisc add dev $DEV root handle 1: htb default 20
+$TC qdisc add dev $DEV root handle 1: htb default 20
 
 # shape everything at $UPLINK speed - this prevents huge queues in your
 # DSL modem which destroy latency:
 
-tc class add dev $DEV parent 1: classid 1:1 htb rate ${UPLINK}kbit burst 6k
+$TC class add dev $DEV parent 1: classid 1:1 htb rate ${UPLINK}kbit burst 6k
 
 # high prio class 1:10:
 
-tc class add dev $DEV parent 1:1 classid 1:10 htb rate ${UPLINK}kbit \
+$TC class add dev $DEV parent 1:1 classid 1:10 htb rate ${UPLINK}kbit \
    burst 6k prio 1
 
 # bulk & default class 1:20 - gets slightly less traffic, 
 # and a lower priority:
 
-tc class add dev $DEV parent 1:1 classid 1:20 htb rate $[9*$UPLINK/10]kbit \
+$TC class add dev $DEV parent 1:1 classid 1:20 htb rate $((9*$UPLINK/10))kbit \
    burst 6k prio 2
 
-tc class add dev $DEV parent 1:1 classid 1:30 htb rate $[8*$UPLINK/10]kbit \
+$TC class add dev $DEV parent 1:1 classid 1:30 htb rate $((8*$UPLINK/10))kbit \
    burst 6k prio 2
 
 # all get Stochastic Fairness:
-tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
-tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
-tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10
+$TC qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
+$TC qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
+$TC qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10
 
 # TOS Minimum Delay (ssh, NOT scp) in 1:10:
 
-tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
+$TC filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
       match ip tos 0x10 0xff  flowid 1:10
 
 # ICMP (ip protocol 1) in the interactive class 1:10 so we 
 # can do measurements & impress our friends:
-tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
+$TC filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
         match ip protocol 1 0xff flowid 1:10
 
 # To speed up downloads while an upload is going on, put ACK packets in
 # the interactive class:
 
-tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
+$TC filter add dev $DEV parent 1: protocol ip prio 10 u32 \
    match ip protocol 6 0xff \
    match u8 0x05 0x0f at 0 \
    match u16 0x0000 0xffc0 at 2 \
@@ -101,31 +95,31 @@
 # some traffic however suffers a worse fate
 for a in $NOPRIOPORTDST
 do
-	tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
+	$TC filter add dev $DEV parent 1: protocol ip prio 14 u32 \
 	   match ip dport $a 0xffff flowid 1:30
 done
 
 for a in $NOPRIOPORTSRC
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
+ 	$TC filter add dev $DEV parent 1: protocol ip prio 15 u32 \
 	   match ip sport $a 0xffff flowid 1:30
 done
 
 for a in $NOPRIOHOSTSRC
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
+ 	$TC filter add dev $DEV parent 1: protocol ip prio 16 u32 \
 	   match ip src $a flowid 1:30
 done
 
 for a in $NOPRIOHOSTDST
 do
- 	tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
+ 	$TC filter add dev $DEV parent 1: protocol ip prio 17 u32 \
 	   match ip dst $a flowid 1:30
 done
 
 # rest is 'non-interactive' ie 'bulk' and ends up in 1:20
 
-tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
+$TC filter add dev $DEV parent 1: protocol ip prio 18 u32 \
    match ip dst 0.0.0.0/0 flowid 1:20
 
 
@@ -136,12 +130,12 @@
 #
 # attach ingress policer:
 
-tc qdisc add dev $DEV handle ffff: ingress
+$TC qdisc add dev $DEV handle ffff: ingress
 
 # filter *everything* to it (0.0.0.0/0), drop everything that's
 # coming in too fast:
 
-tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
+$TC filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
    0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1
 
 
