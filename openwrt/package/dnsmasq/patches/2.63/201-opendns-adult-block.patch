--- a/src/dnsmasq.h	2012-08-16 06:04:05.000000000 -0700
+++ b/src/dnsmasq.h	2012-09-05 19:48:58.373984884 -0700
@@ -829,6 +829,7 @@
   /* utility string buffer, hold max sized IP address as string */
   char *addrbuff;
 
+  int opendns_block_content;
 } *daemon;
 
 /* cache.c */
@@ -879,6 +880,7 @@
 size_t resize_packet(struct dns_header *header, size_t plen, 
 		  unsigned char *pheader, size_t hlen);
 size_t add_mac(struct dns_header *header, size_t plen, char *limit, union mysockaddr *l3);
+void add_opendns_block_rr(struct daemon *daemon, struct dns_header *header, size_t *qlen);
 
 /* util.c */
 void rand_init(void);
--- a/src/forward.c	2012-08-16 06:04:05.000000000 -0700
+++ b/src/forward.c	2012-09-05 19:39:05.949915803 -0700
@@ -326,6 +326,9 @@
 	}
     }
 
+  if (daemon->opendns_block_content)
+    add_opendns_block_rr(daemon, header, &plen);
+
   /* check for send errors here (no route to host) 
      if we fail to send to all nameservers, send back an error
      packet straight away (helps modem users when offline)  */
--- a/src/option.c	2012-08-16 06:04:05.000000000 -0700
+++ b/src/option.c	2012-09-05 19:41:02.446778230 -0700
@@ -120,6 +120,7 @@
 #define LOPT_TFTP_LC   309
 #define LOPT_RR        310
 #define LOPT_CLVERBIND 311
+#define LOPT_ODNS_BC   312
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -245,6 +246,7 @@
     { "dhcp-duid", 1, 0, LOPT_DUID },
     { "host-record", 1, 0, LOPT_HOST_REC },
     { "bind-dynamic", 0, 0, LOPT_CLVERBIND },
+    {"opendns-block-content", 1, 0, LOPT_ODNS_BC},
     { NULL, 0, 0, 0 }
   };
 
@@ -377,6 +379,7 @@
   { LOPT_HOST_REC, ARG_DUP, "<name>,<address>", gettext_noop("Specify host (A/AAAA and PTR) records"), NULL },
   { LOPT_RR, ARG_DUP, "<name>,<RR-number>,[<data>]", gettext_noop("Specify arbitrary DNS resource record"), NULL },
   { LOPT_CLVERBIND, OPT_CLEVERBIND, NULL, gettext_noop("Bind to interfaces in use - check for new interfaces"), NULL},
+  { LOPT_ODNS_BC, ARG_ONE, "<mask>", gettext_noop("Use OpenDNS CLIENTID option to block adult content. (Defaults to 0 (filter nothing).)"), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -3055,6 +3058,13 @@
 	break;
       }
       
+    case LOPT_ODNS_BC:  /* --opendns-block-content */
+      {
+	int v = strtol(arg, NULL, 0);
+	daemon->opendns_block_content = v & 0x7f;
+      }
+      break;
+
     case 'W':  /* --srv-host */
       {
 	int port = 1, priority = 0, weight = 0;
@@ -3591,6 +3601,7 @@
   daemon->tftp_max = TFTP_MAX_CONNECTIONS;
   daemon->edns_pktsz = EDNS_PKTSZ;
   daemon->log_fac = -1;
+  daemon->opendns_block_content = 0;
   add_txt("version.bind", "dnsmasq-" VERSION );
   add_txt("authors.bind", "Simon Kelley");
   add_txt("copyright.bind", COPYRIGHT);
--- a/src/rfc1035.c	2012-08-16 06:04:05.000000000 -0700
+++ b/src/rfc1035.c	2012-09-05 19:49:23.325319776 -0700
@@ -1857,7 +1857,45 @@
   return ansp - (unsigned char *)header;
 }
 
+void
+add_opendns_block_rr(struct daemon *daemon, struct dns_header *header, size_t *qlen)
+{
+  char client_id[] = {
+    0x00,                       /* empty name ('\0') */
+    0x00, 0x29,                 /* type */
+    0x04, 0x00,                 /* class */
+    0x00, 0x00, 0x00, 0x00,     /* ttl */
+    0x00, 0x0C,                 /* data length (below) */
+    0x00, 0x04, 0x00, 0x08,     /* magic */
+    0x4f, 0x70, 0x65, 0x6e,     /* 'Open' */
+    0x44, 0x4e, 0x53            /* 'DNS' */
+  };
 
+  if (find_pseudoheader(header, *qlen, NULL, NULL, NULL)
+      || *qlen + sizeof(client_id) + 1 > (unsigned)daemon->packet_buff_sz)
+    {
+      const char *msg = "existing EDNS0 header or no space in buffer; cannot append OpenDNS CLIENTID";
+      fprintf(stderr, "%s", msg);
+      syslog(LOG_WARNING, "%s", msg);
+      return;
+    }
 
+  char *rr = (char *)header + *qlen;
+  memcpy(rr, client_id, sizeof(client_id));
 
+  char *mask = rr + sizeof(client_id);
+  *mask = daemon->opendns_block_content;
+  /*
+    Currently defined bit values for *mask, from OpenDNS:
+    #define CATEGORY_lingerie  (1 << 0)
+    #define CATEGORY_mature    (1 << 1)
+    #define CATEGORY_nudity    (1 << 2)
+    #define CATEGORY_porn      (1 << 3)
+    #define CATEGORY_proxy     (1 << 4)
+    #define CATEGORY_sexuality (1 << 5)
+    #define CATEGORY_tasteless (1 << 6)
+  */
 
+  header->arcount = htons(ntohs(header->arcount) + 1);
+  *qlen += sizeof(client_id) + 1;
+}
