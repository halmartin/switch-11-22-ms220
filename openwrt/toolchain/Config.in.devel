#

menu "Toolchain Options"

choice
	prompt "C Library"
	default BR2_LIBC_UCLIBC
	default BR2_LIBC_MUSL if BR2_arm64

	help
	  Select the C Library you wish to use

	config BR2_LIBC_UCLIBC
		bool "uClibc"
		depends on !BR2_arm64

	config BR2_LIBC_MUSL
		bool "musl"

endchoice

config BR2_LIBC
	string
	default "uClibc" if BR2_LIBC_UCLIBC
	default "musl" if BR2_LIBC_MUSL

source "toolchain/uClibc/Config.in"
source "toolchain/musl/Config.in"
source "toolchain/binutils/Config.in"
source "toolchain/gcc/Config.in"
source "toolchain/gdb/Config.in"

comment "Common Toolchain Options"

config BR2_ENABLE_MULTILIB
	bool "Enable multilib support?"
	default n
	help
	    If you want multilib enabled, enable this...

config BR2_LARGEFILE
	bool "Enable large file (files > 2 GB) support?"
	depends on !BR2_cris
	default y
	help
	    Enable large file (files > 2 GB) support

config BR2_SOFT_FLOAT
        bool
	prompt "Use software floating point by default"
	default n
	depends on BR2_arm || BR2_mips || BR2_powerpc || BR2_armeb || BR2_mipsel
	help
	  If your target CPU does not have a Floating Point Unit (FPU) or a
	  kernel FPU emulator, but you still wish to support floating point
	  functions, then everything will need to be compiled with soft floating
	  point support (-msoft-float).

	  Most people will answer N.

config BR2_POWERPC_E500
	bool
	prompt "Use PowerPC E500 ABI (SPE)"
	depends on BR2_powerpc
	select BR2_SOFT_FLOAT if BR2_LIBC_MUSL
	default n
	help
	  Enables the PowerPC E500 SPE extensions.  If using musl, instead this
	  forces software floating point since musl does not support SPE.

config BR2_WIRED_POWERPC
	bool
	prompt "Use Wired-PowerPC(MX) uClibc config"
	depends on BR2_powerpc
	default n

config BR2_TARGET_OPTIMIZATION
	string
	prompt "Target Optimizations"
	default "-Os -pipe -march=i486 -funit-at-a-time" if BR2_i386
	default "-Os -pipe -mips32 -mtune=mips32 -funit-at-a-time" if BR2_mipsel || BR2_mips
	default "-Os -pipe -funit-at-a-time"
	help
	  Optimizations to use when building for the target host.

# Might be worth experimenting with for gcc 3.4.x.
#GCC_WITH_CPU:=
#GCC_WITH_ARCH:=
#GCC_WITH_TUNE:=

#GCC_WITH_CPU:=--with-cpu=
#GCC_WITH_ARCH:=--with-arch=
#GCC_WITH_TUNE:=--with-tune=


endmenu

